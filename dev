#!/bin/bash
# 🚀 远程开发环境管理工具 v5.0
# 作者: Zhang-Jingdian (2157429750@qq.com)

set -e

# ================================================================================================
# 颜色定义
# ================================================================================================
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly GRAY='\033[0;90m'
readonly NC='\033[0m'

readonly SUCCESS="✅"
readonly ERROR="❌"
readonly INFO="ℹ️"
readonly DOCKER="🐳"
readonly SYNC="📁"
readonly ROCKET="🚀"

# ================================================================================================
# 配置管理
# ================================================================================================
load_config() {
    [[ -f "config.env" ]] || { echo -e "${RED}${ERROR} config.env 文件不存在${NC}"; exit 1; }
    source config.env
}

# ================================================================================================
# 用户界面
# ================================================================================================
print_header() {
    echo -e "${CYAN}${ROCKET} 远程开发环境管理工具 v5.0${NC}"
    echo -e "${GRAY}────────────────────────────────────────${NC}"
}

print_success() { echo -e "${GREEN}${SUCCESS} $1${NC}"; }
print_error() { echo -e "${RED}${ERROR} $1${NC}"; }
print_info() { echo -e "${BLUE}${INFO} $1${NC}"; }
print_docker() { echo -e "${CYAN}${DOCKER} $1${NC}"; }
print_sync() { echo -e "${YELLOW}${SYNC} $1${NC}"; }

show_help() {
    print_header
    echo
    echo -e "${YELLOW}用法:${NC} ./dev <command>"
    echo
    echo -e "${YELLOW}命令:${NC}"
    echo "  setup    初始化环境"
    echo "  dev      一键开发模式"
    echo "  up       启动容器"
    echo "  down     停止容器"
    echo "  remote   进入容器"
    echo "  sync     同步文件"
    echo "  status   查看状态"
    echo "  logs     查看日志"
    echo "  test     运行测试"
    echo
    echo -e "${YELLOW}示例:${NC}"
    echo "  ./dev setup    # 初始化"
    echo "  ./dev dev      # 一键开发"
    echo "  ./dev remote   # 进入容器"
    echo
}

# ================================================================================================
# 核心功能
# ================================================================================================

# 文件同步
sync_files() {
    print_sync "同步文件到远程..."
    load_config
    
    local exclude_patterns=()
    if [[ -n "${SYNC_EXCLUDE}" ]]; then
        IFS=',' read -ra exclude_patterns <<< "${SYNC_EXCLUDE}"
    else
        exclude_patterns=('.git' 'node_modules' '__pycache__' '.venv' 'dist' '*.pyc' '*.log' '.DS_Store' '*.tmp' '.pytest_cache' 'coverage')
    fi
    
    local rsync_excludes=""
    for pattern in "${exclude_patterns[@]}"; do
        rsync_excludes="$rsync_excludes --exclude='$pattern'"
    done
    
    if eval rsync -av $rsync_excludes "./" "$REMOTE_HOST:$REMOTE_PATH/"; then
        print_success "文件同步完成"
    else
        print_error "文件同步失败"
        exit 1
    fi
}

# Docker容器管理
docker_up() {
    print_docker "启动Docker容器..."
    load_config
    if docker-compose -f "${DOCKER_COMPOSE_FILE}" up -d; then
        print_success "Docker容器启动成功"
        echo -e "${GRAY}端口: ${DEBUG_PORT:-9000}, ${NODE_PORT:-3000}, ${PYTHON_PORT:-5000}, ${DJANGO_PORT:-8000}${NC}"
    else
        print_error "Docker容器启动失败"
        exit 1
    fi
}

docker_down() {
    print_docker "停止Docker容器..."
    load_config
    if docker-compose -f "${DOCKER_COMPOSE_FILE}" down; then
        print_success "Docker容器停止成功"
    else
        print_error "Docker容器停止失败"
        exit 1
    fi
}

# 状态检查
show_status() {
    print_header
    echo
    
    load_config
    local docker_status=$(docker-compose -f "${DOCKER_COMPOSE_FILE}" ps 2>/dev/null || echo "")
    if echo "$docker_status" | grep -q "Up"; then
        print_docker "容器运行中"
        echo "$docker_status" | grep -E "(NAME|${CONTAINER_NAME})" | sed 's/^/  /'
    else
        echo -e "${RED}${DOCKER} 容器未运行${NC}"
    fi
    
    echo
    if [[ -f "config.env" ]]; then
        print_success "配置文件已加载"
        load_config
        echo -e "  ${GRAY}本地路径:${NC} ${LOCAL_PATH:-'.'}"
        echo -e "  ${GRAY}远程主机:${NC} ${REMOTE_HOST:-'localhost'}"
        echo -e "  ${GRAY}远程路径:${NC} ${REMOTE_PATH:-'/tmp/workspace'}"
    else
        print_error "配置文件不存在"
    fi
    
    echo
    if ping -c 1 "${REMOTE_HOST:-localhost}" >/dev/null 2>&1; then
        print_success "网络连接正常"
    else
        echo -e "${RED}网络连接失败${NC}"
    fi
}

# 日志查看
show_logs() {
    print_info "显示Docker容器日志 (Ctrl+C 退出)..."
    load_config
    docker-compose -f "${DOCKER_COMPOSE_FILE}" logs -f
}

# 远程命令执行
remote_run() {
    local command="$1"
    load_config
    
    if [[ -z "$command" ]]; then
        command="bash"
        print_info "启动交互式shell..."
    fi
    
    print_info "连接到 $REMOTE_HOST 执行: $command"
    sync_files
    
    if [[ "$command" == "bash" || "$command" == "sh" ]]; then
        local bashrc_file=".remote_bashrc"
        local interactive_command="cd $REMOTE_PATH && docker exec -it $CONTAINER_NAME bash -c \"
if [ -f /workspace/docker/$bashrc_file ]; then
    cp /workspace/docker/$bashrc_file /root/.bashrc
fi
cd /workspace
bash --login
\""
        ssh -t "$REMOTE_HOST" "$interactive_command"
    else
        local remote_command="cd $REMOTE_PATH && docker exec -i $CONTAINER_NAME $command"
        ssh "$REMOTE_HOST" "$remote_command"
    fi
}

# 环境初始化
setup_env() {
    print_header
    print_info "开始环境初始化..."
    
    # 依赖检查
    print_info "检查系统依赖..."
    local dependencies=("docker" "docker-compose" "rsync" "ssh")
    local missing_deps=()
    
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_error "缺少依赖: ${missing_deps[*]}"
        echo -e "${YELLOW}安装命令:${NC}"
        for dep in "${missing_deps[@]}"; do
            case "$dep" in
                "docker") echo "  请安装 Docker Desktop" ;;
                "docker-compose") echo "  请安装 Docker Compose" ;;
                *) echo "  请安装 $dep" ;;
            esac
        done
        exit 1
    fi
    
    print_success "所有依赖已安装"
    
    # 配置文件检查
    if [[ ! -f "config.env" ]]; then
        print_info "创建默认配置文件..."
        cat > config.env << 'EOF'
# 远程服务器配置
REMOTE_HOST=192.168.0.105
REMOTE_USER=zjd
REMOTE_PATH=/home/zjd/workspace

# 本地配置
LOCAL_PATH=./work

# 同步配置
SYNC_EXCLUDE=".git,node_modules,*.log,*.tmp,.DS_Store,__pycache__"

# 开发工具配置
DEV_SCRIPT=./dev
DOCKER_DIR=./docker
LOGS_DIR=./docker/logs

# Docker配置
CONTAINER_NAME=remote-dev-env
DOCKER_COMPOSE_FILE=./docker/docker-compose.yml

# 开发环境配置
PYTHON_VERSION=3.11
NODE_VERSION=18

# 端口配置
PYTHON_PORT=5000
NODE_PORT=3000
DJANGO_PORT=8000
DEBUG_PORT=9000

# 性能配置
SYNC_INTERVAL=5
WATCH_ENABLED=true
AUTO_SYNC=true

# 代理配置
HTTP_PROXY=socks5://127.0.0.1:7897
HTTPS_PROXY=socks5://127.0.0.1:7897
NO_PROXY=localhost,127.0.0.1
EOF
        print_success "配置文件已创建: config.env"
    else
        print_success "配置文件已存在"
    fi
    
    # 安装命令别名
    print_info "安装dev命令别名..."
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local dev_script="${DEV_SCRIPT:-$script_dir/dev}"
    
    if [[ ! -x "$dev_script" ]]; then
        chmod +x "$dev_script"
    fi
    
    if [[ -w "/usr/local/bin" ]]; then
        ln -sf "$dev_script" "/usr/local/bin/dev" 2>/dev/null
        print_success "dev命令已安装到系统路径"
        echo -e "${GRAY}💡 现在可以直接使用 'dev' 命令${NC}"
    else
        local shell_config=""
        if [[ "$SHELL" == *"zsh"* ]]; then
            shell_config="$HOME/.zshrc"
        elif [[ "$SHELL" == *"bash"* ]]; then
            shell_config="$HOME/.bashrc"
            [[ -f "$HOME/.bash_profile" ]] && shell_config="$HOME/.bash_profile"
        fi
        
        if [[ -n "$shell_config" ]]; then
            if ! grep -q "alias dev=" "$shell_config" 2>/dev/null; then
                echo "" >> "$shell_config"
                echo "# dev命令别名 - 远程开发环境" >> "$shell_config"
                echo "alias dev='$dev_script'" >> "$shell_config"
                print_success "别名已添加到 $shell_config"
                echo -e "${YELLOW}💡 请运行 'source $shell_config' 或重新打开终端${NC}"
            else
                print_success "dev别名已存在"
            fi
        else
            print_info "无法自动设置别名，请手动添加:"
            echo "   alias dev='$dev_script'"
        fi
    fi
    
    echo
    print_success "🎉 环境初始化完成！"
    
    # 运行系统测试
    echo
    print_info "运行系统测试..."
    run_tests
    
    echo
    echo -e "${YELLOW}🚀 下一步:${NC}"
    echo "  1. 启动环境: dev up (或 ./dev up)"
    echo "  2. 进入开发: dev remote bash"
    echo "  3. 编辑配置文件: vim config.env (可选)"
}

# 一键开发模式
dev_mode() {
    print_header
    print_info "🚀 启动一键开发模式..."
    
    docker_up
    sync_files
    detect_and_install_deps
    print_info "进入开发环境..."
    remote_run "bash"
}

# 智能依赖检测和安装
detect_and_install_deps() {
    print_info "🔍 检测项目类型..."
    
    local has_python=false
    local has_node=false
    
    if [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
        has_python=true
        print_info "检测到Python项目"
    fi
    
    if [[ -f "package.json" ]]; then
        has_node=true
        print_info "检测到Node.js项目"
    fi
    
    if [[ "$has_python" == "true" ]]; then
        print_info "安装Python依赖..."
        remote_run "pip install -r requirements.txt 2>/dev/null || echo 'Python依赖安装完成'"
    fi
    
    if [[ "$has_node" == "true" ]]; then
        print_info "安装Node.js依赖..."
        remote_run "npm install 2>/dev/null || echo 'Node.js依赖安装完成'"
    fi
}

# 系统测试
run_tests() {
    print_info "运行系统测试..."
    
    local tests_total=0
    local tests_passed=0
    local tests_failed=0
    
    run_test() {
        local test_name="$1"
        local test_func="$2"
        ((tests_total++))
        
        if $test_func; then
            print_success "$test_name"
            ((tests_passed++))
        else
            print_error "$test_name失败"
            ((tests_failed++))
        fi
    }
    
    test_config_exists() { [[ -f "config.env" ]]; }
    test_dev_executable() { [[ -f "dev" ]] && [[ -x "dev" ]]; }
    test_docker_files() { [[ -f "docker/docker-compose.yml" ]]; }
    test_bashrc() { [[ -f "docker/.remote_bashrc" ]]; }
    test_basic_deps() {
        local deps=("docker" "rsync" "ssh")
        for dep in "${deps[@]}"; do
            command -v "$dep" >/dev/null 2>&1 || return 1
        done
        return 0
    }
    test_syntax() { bash -n "./dev" 2>/dev/null; }
    test_network() {
        if [[ -f "config.env" ]]; then
            load_config
            ping -c 1 "${REMOTE_HOST:-localhost}" >/dev/null 2>&1
        else
            return 0
        fi
    }
    
    echo -e "${BLUE}🧪 开始运行系统测试...${NC}"
    echo "$(printf '=%.0s' {1..40})"
    
    run_test "配置文件存在" test_config_exists || true
    run_test "dev脚本可执行" test_dev_executable || true
    run_test "Docker配置文件存在" test_docker_files || true
    run_test "bashrc配置存在" test_bashrc || true
    run_test "基础依赖检查" test_basic_deps || true
    run_test "dev脚本语法正确" test_syntax || true
    run_test "网络连接正常" test_network || true
    
    echo "$(printf '=%.0s' {1..40})"
    
    if [[ $tests_failed -eq 0 ]]; then
        print_success "所有测试通过！($tests_passed/$tests_total)"
        echo -e "${BLUE}💡 远程开发环境已就绪，可以开始使用了${NC}"
        return 0
    else
        print_error "$tests_failed 个测试失败 (总计 $tests_total 个测试)"
        echo -e "${GREEN}✅ $tests_passed 个测试通过${NC}"
        return 1
    fi
}

# ================================================================================================
# 主程序入口
# ================================================================================================
main() {
    case "${1:-help}" in
        setup)      setup_env ;;
        sync)       sync_files ;;
        up)         docker_up ;;
        down)       docker_down ;;
        status)     show_status ;;
        logs)       show_logs ;;
        remote)     remote_run "$2" ;;
        dev)        dev_mode ;;
        test)       run_tests ;;
        help|*)     show_help ;;
    esac
}

# 执行主程序
main "$@" 