#!/bin/bash
# 🚀 远程开发环境 - 简化CLI工具
# 作者: Zhang-Jingdian (2157429750@qq.com)

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 加载配置
load_config() {
    if [[ -f "config.env" ]]; then
        source config.env
    else
        echo -e "${RED}❌ config.env 文件不存在${NC}"
        exit 1
    fi
}

# 显示帮助
show_help() {
    echo "🚀 远程开发环境 - 简化CLI工具"
    echo
    echo "用法: ./dev <command> [options]"
    echo
    echo "命令:"
    echo "  setup      初始化环境"
    echo "  sync       同步文件到远程"
    echo "  watch      监控文件变化并自动同步"
    echo "  up         启动Docker容器"
    echo "  down       停止Docker容器"
    echo "  status     查看运行状态"
    echo "  logs       查看日志"
    echo "  test       运行测试"
    echo "  remote-run 在远程Docker容器中执行命令"
    echo "  help       显示帮助"
    echo
}

# 初始化环境
setup_env() {
    echo -e "${BLUE}🔧 初始化环境...${NC}"
    
    # 检查依赖
    command -v docker >/dev/null 2>&1 || { echo -e "${RED}❌ Docker 未安装${NC}"; exit 1; }
    command -v rsync >/dev/null 2>&1 || { echo -e "${RED}❌ rsync 未安装${NC}"; exit 1; }
    
    # 创建必要目录
    mkdir -p logs
    
    echo -e "${GREEN}✅ 环境初始化完成${NC}"
}

# 文件同步
sync_files() {
    echo -e "${BLUE}📁 同步文件到远程...${NC}"
    load_config
    
    local local_path=${LOCAL_PATH:-"."}
    local remote_path=${REMOTE_PATH:-"/tmp/workspace"}
    local remote_host=${REMOTE_HOST:-"localhost"}
    
    if rsync -av --exclude='.git' --exclude='node_modules' --exclude='__pycache__' \
              "$local_path/" "$remote_host:$remote_path/"; then
        echo -e "${GREEN}✅ 文件同步成功${NC}"
    else
        echo -e "${RED}❌ 文件同步失败${NC}"
        exit 1
    fi
}

# 监控文件变化
watch_files() {
    echo -e "${BLUE}👁️  开始监控文件变化...${NC}"
    
    if command -v fswatch >/dev/null 2>&1; then
        # macOS使用fswatch
        fswatch -o . | while read f; do
            echo -e "${YELLOW}🔄 检测到文件变化，正在同步...${NC}"
            sync_files
        done
    elif command -v inotifywait >/dev/null 2>&1; then
        # Linux使用inotifywait
        inotifywait -mr --format '%w%f' -e modify,create,delete . | while read file; do
            echo -e "${YELLOW}🔄 检测到文件变化: $file${NC}"
            sync_files
        done
    else
        echo -e "${YELLOW}⚠️  文件监控工具未安装，使用定时同步...${NC}"
        while true; do
            sleep 5
            sync_files
        done
    fi
}

# Docker操作
docker_up() {
    echo -e "${BLUE}🐳 启动Docker容器...${NC}"
    if docker-compose up -d; then
        echo -e "${GREEN}✅ Docker容器启动成功${NC}"
    else
        echo -e "${RED}❌ Docker容器启动失败${NC}"
        exit 1
    fi
}

docker_down() {
    echo -e "${BLUE}🐳 停止Docker容器...${NC}"
    if docker-compose down; then
        echo -e "${GREEN}✅ Docker容器停止成功${NC}"
    else
        echo -e "${RED}❌ Docker容器停止失败${NC}"
        exit 1
    fi
}

# 在远程Docker容器中执行命令
remote_run() {
    echo -e "${BLUE}🚀 在远程Docker容器中执行命令...${NC}"
    load_config
    
    local remote_host=${REMOTE_HOST:-"localhost"}
    local remote_path=${REMOTE_PATH:-"/tmp/workspace"}
    local container_name=${DOCKER_SERVICE_NAME:-"dev-env"}
    
    # 获取要执行的命令
    local command="${*:1}"  # 获取所有参数作为命令
    
    if [[ -z "$command" ]]; then
        command="bash"  # 默认进入bash
        echo -e "${YELLOW}💡 未指定命令，将进入交互式shell${NC}"
    fi
    
    echo -e "${BLUE}📡 连接到 $remote_host 执行: $command${NC}"
    
    # 先同步最新代码
    sync_files
    
    # 在远程Docker容器中执行命令
    ssh "$remote_host" "cd $remote_path && docker exec -it $container_name $command"
}

# 查看状态
show_status() {
    echo -e "${BLUE}📊 系统状态:${NC}"
    echo
    
    # Docker状态
    if docker-compose ps >/dev/null 2>&1; then
        echo -e "${GREEN}🐳 Docker: 运行中${NC}"
        docker-compose ps
    else
        echo -e "${RED}🐳 Docker: 未运行${NC}"
    fi
    
    echo
    
    # 配置状态
    if [[ -f "config.env" ]]; then
        echo -e "${GREEN}⚙️  配置文件: 存在${NC}"
        load_config
        echo "   本地路径: ${LOCAL_PATH:-'.'}"
        echo "   远程主机: ${REMOTE_HOST:-'localhost'}"
        echo "   远程路径: ${REMOTE_PATH:-'/tmp/workspace'}"
    else
        echo -e "${RED}⚙️  配置文件: 不存在${NC}"
    fi
    
    echo
    
    # 连接测试
    load_config
    if ping -c 1 "${REMOTE_HOST:-localhost}" >/dev/null 2>&1; then
        echo -e "${GREEN}🌐 网络连接: 正常${NC}"
    else
        echo -e "${RED}🌐 网络连接: 失败${NC}"
    fi
}

# 查看日志
show_logs() {
    local lines=${1:-50}
    echo -e "${BLUE}📋 Docker日志 (最近 $lines 行):${NC}"
    docker-compose logs --tail="$lines" -f
}

# 运行测试
run_tests() {
    echo -e "${BLUE}🧪 运行测试...${NC}"
    if python3 tests/test_dev.py; then
        echo -e "${GREEN}✅ 所有测试通过${NC}"
    else
        echo -e "${RED}❌ 测试失败${NC}"
        exit 1
    fi
}

# 主命令处理
main() {
    case "${1:-help}" in
        setup)
            setup_env
            ;;
        sync)
            sync_files
            ;;
        watch)
            watch_files
            ;;
        up)
            docker_up
            ;;
        down)
            docker_down
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs "${2:-50}"
            ;;
        test)
            run_tests
            ;;
        remote-run)
            shift  # 移除第一个参数(remote-run)
            remote_run "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}❌ 未知命令: $1${NC}"
            echo
            show_help
            exit 1
            ;;
    esac
}

main "$@" 